---
name: Docker

"on":
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: githublint
  BUILD_OPTS: --target stage-prd --file Dockerfile

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          docker build . $BUILD_OPTS

          [ "$ACTIONS_STEP_DEBUG" != "true" ] || XTRACE=1

          expected="$GITHUB_REPOSITORY"
          resulet_file="$(mktemp)"
          docker run --rm -e GITHUB_TOKEN -e XTRACE \
            "$(docker build . -q $BUILD_OPTS)" \
            -df "map(select(.full_name == \"$expected\"))" orgs/Kyash | tee "$resulet_file" ||
            test $? -le 1
          actual="$(< "$resulet_file" grep '^repository\b' | head -1 | cut -f3)"
          test "$actual" = "$expected"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          VERSION=''
          [[ "${GITHUB_REF}" != "refs/tags/v"* ]] || VERSION="${GITHUB_REF##*/}"

          docker build . $BUILD_OPTS --tag "$IMAGE_NAME" --build-arg VERSION="$VERSION"

      - name: Log into registry
        run: echo "$GITHUB_TOKEN" | docker login docker.pkg.github.com -u "$GITHUB_ACTOR" --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID="docker.pkg.github.com/${GITHUB_REPOSITORY,,}/${IMAGE_NAME,,}"

          # Strip git ref prefix from version
          VERSION="${GITHUB_REF##*/}"

          # Strip "v" prefix from tag name
          [[ "${GITHUB_REF}" != "refs/tags/"* ]] || VERSION=${VERSION#v}

          # Use Docker `latest` tag convention
          [ "$VERSION" != "main" ] || VERSION=latest

          echo "IMAGE_ID=$IMAGE_ID"
          echo "VERSION=$VERSION"

          docker tag "$IMAGE_NAME" "$IMAGE_ID:$VERSION"
          docker push "$IMAGE_ID:$VERSION"
